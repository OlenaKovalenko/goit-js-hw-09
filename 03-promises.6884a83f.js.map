{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KA3CM,CACXQ,KAAMC,SAASC,cAAc,WAQ1BF,KAAKG,iBAAiB,UAG3B,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAMC,GAAeF,EAAMG,OAAOC,SAAShB,MAAMiB,MAC3CC,GAASN,EAAMG,OAAOC,SAASE,KAAKD,MACpCE,GAAWP,EAAMG,OAAOC,SAASG,OAAOF,MAErCG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAGnCtB,EAAcsB,EAFEN,EAAaI,GAAQE,EAAI,IAGtCC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAErBJ,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE1D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAEtBJ,EAAA2B,OAAOI,QAAQ,sBAAuCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  // delayInput: document.querySelector('input[name=\"delay\"]'),\n  // stepInput: document.querySelector('input[name=\"step\"]'),\n  // amountInput: document.querySelector('input[name=\"amount\"]'),\n  // button: document.querySelector('button[type=\"submit\"]'),\n};\n\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  \n  const firstDelay = +(event.target.elements.delay.value);\n  const step = +(event.target.elements.step.value);\n  const amount = +(event.target.elements.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    let stepDelay = firstDelay + step * (i - 1);\n\n    createPromise(i, stepDelay)\n      .then(({ position, delay }) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n\n\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","firstDelay","target","elements","value","step","amount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6884a83f.js.map"}